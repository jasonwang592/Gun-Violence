{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"output",
				"output_path\tstatement"
			],
			[
				"chro",
				"choropleth_helper\tmodule"
			],
			[
				"try",
				"try\tTry/Except"
			],
			[
				"oput",
				"output_path"
			],
			[
				"all",
				"all_genders"
			],
			[
				"st",
				"state_df"
			],
			[
				"sg",
				"sg_df"
			],
			[
				"age",
				"age_agg_df"
			],
			[
				"sa",
				"sga_df"
			],
			[
				"stat",
				"state_gender_df"
			],
			[
				"state",
				"state_gender_df\tstatement"
			],
			[
				"tot",
				"tot_revenue\tstatement"
			],
			[
				"bin",
				"bin_search\tfunction"
			],
			[
				"assert",
				"assertEqual\tfunction"
			],
			[
				"row",
				"row_array\tstatement"
			],
			[
				"return",
				"return_array\tstatement"
			],
			[
				"retu",
				"return_array\tstatement"
			],
			[
				"ass",
				"assertEqual\tfunction"
			],
			[
				"as",
				"assertIn\tfunction"
			],
			[
				"tup",
				"tup_arr\tstatement"
			],
			[
				"str",
				"str_arr\tstatement"
			],
			[
				"pr",
				"practice_problems\tmodule"
			],
			[
				"up",
				"up_left_sum\tstatement"
			],
			[
				"sum",
				"sum_prod_diags"
			],
			[
				"find",
				"findOdd\tfunction"
			],
			[
				"changed",
				"change_description"
			],
			[
				"sor",
				"sorted_jobs\tstatement"
			],
			[
				"su",
				"sudokuValidator"
			],
			[
				"get",
				"get_best_word\tfunction"
			],
			[
				"his",
				"hist_by_metric\tfunction"
			],
			[
				"print",
				"print\tkeyword"
			],
			[
				"left",
				"left_df"
			],
			[
				"hea",
				"heatplot"
			],
			[
				"if",
				"ifmain\tif __name__ == '__main__'"
			],
			[
				"br",
				"browser"
			],
			[
				"string",
				"stringToByte\tfunction"
			],
			[
				"byte",
				"byteToBit"
			],
			[
				"ladd",
				"ladderLength"
			],
			[
				"next",
				"nextlevel"
			],
			[
				"net",
				"nextlevel"
			],
			[
				"lInd",
				"l1Ind"
			],
			[
				"pow",
				"powerOfTwo\tfunction"
			],
			[
				"coo",
				"greedCookies"
			],
			[
				"count",
				"countDict"
			],
			[
				"min",
				"minInd"
			],
			[
				"max",
				"maxNum"
			],
			[
				"ladderClimb",
				"ladderClimbRecursive"
			],
			[
				"la",
				"ladderClimb"
			],
			[
				"binar",
				"binarySearchRotated"
			],
			[
				"let",
				"letter\tforstmt"
			],
			[
				"letter",
				"letterDict"
			],
			[
				"sub",
				"substring_count"
			],
			[
				"group",
				"group_dishes"
			],
			[
				"oncei",
				"once_integer_sorted"
			],
			[
				"filter",
				"filter_df"
			],
			[
				"Non",
				"Non_Payment"
			],
			[
				"evi",
				"evic_reasons"
			],
			[
				"evc",
				"evic_array"
			],
			[
				"evic",
				"evic_matrix"
			],
			[
				"n",
				"Neighborhood"
			],
			[
				"reason",
				"reason_array"
			],
			[
				"reas",
				"reason_array"
			],
			[
				"sorted",
				"sorted_cont"
			],
			[
				"read",
				"read_and_clean"
			],
			[
				"tpos",
				"t_pos_words"
			],
			[
				"can",
				"candidate\tparam"
			],
			[
				"word",
				"word_index"
			],
			[
				"sentei",
				"sentiment_words"
			],
			[
				"key",
				"keywords"
			],
			[
				"positi",
				"positive-words.txt"
			],
			[
				"tf_d",
				"tf_idf\t(tfidf_helper.py)"
			],
			[
				"senti",
				"sentiment_chart"
			],
			[
				"hpos",
				"h_pos_words"
			],
			[
				"candi",
				"candidate_text"
			],
			[
				"cand",
				"candidate_text"
			],
			[
				"tneg",
				"t_neg_words"
			],
			[
				"hpo",
				"h_pos_words"
			],
			[
				"pword",
				"p_word_list"
			],
			[
				"clin",
				"clinton_words"
			],
			[
				"clint",
				"clinton_tuples"
			],
			[
				"clinto",
				"clinton_dict"
			],
			[
				"clinton",
				"clinton_wordlist"
			],
			[
				"read_",
				"read_and_clean"
			],
			[
				"rate",
				"rate_df"
			],
			[
				"strip",
				"strip_string"
			],
			[
				"coln",
				"columns"
			],
			[
				"abs",
				"abs_df"
			],
			[
				"spl",
				"split_data"
			],
			[
				"picl",
				"pickle_in"
			],
			[
				"pci",
				"pickle_in"
			],
			[
				"i",
				"import"
			],
			[
				"pick",
				"pickle_out"
			],
			[
				"curr",
				"curr_count"
			],
			[
				"lon",
				"longest_palindrome"
			],
			[
				"l",
				"l_ind\tstatement"
			],
			[
				"hpi_",
				"HPI_State_Correlation\tstatement"
			],
			[
				"subo",
				"subplot2grid\tfunction"
			],
			[
				"HPI",
				"HPI_data"
			],
			[
				"Hpi",
				"HPI_data"
			],
			[
				"hpi",
				"HPI_data\tstatement"
			],
			[
				"pic",
				"pickle_in\tstatement"
			],
			[
				"rand",
				"random"
			],
			[
				"dup",
				"duplicate_count"
			],
			[
				"duoc",
				"dupCount"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport itertools\nimport plotly.graph_objs as go\nfrom plotly.offline import plot, iplot\nimport os\nimport shutil\nimport choropleth_helper\n\ndownload_path = '/Users/jason.wang/Downloads/'\noutput_path = '/Users/jason.wang/Documents/Analytics Projects/Gun Control/output/'\n\n\nsg_df = pd.read_csv('files/state_gender.txt', sep = '\\t')\nsga_df = pd.read_csv('files/state_gender_age.txt', sep = '\\t')\n\n'''\n* Filling DataFrame with all possible combinations of State, Year and Gender so we can infer some values\nlater during aggregation by taking the average there is missing data. Marking columns that were previously missing\nso we can denote that on US map representation\n* Cleaning up some redundant columns. Removed some rows where data had not been collected yet\nRecalculating the rate per 100k\n'''\nall_years = [1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\nall_genders = ['Male', 'Female']\nall_states = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware',\n\t'District of Columbia', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky',\n\t'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska',\n\t'Nevada', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island',\n\t'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming']\nstate_map = {\n        'AK': 'Alaska',\n        'AL': 'Alabama',\n        'AR': 'Arkansas',\n        'AS': 'American Samoa',\n        'AZ': 'Arizona',\n        'CA': 'California',\n        'CO': 'Colorado',\n        'CT': 'Connecticut',\n        'DC': 'District of Columbia',\n        'DE': 'Delaware',\n        'FL': 'Florida',\n        'GA': 'Georgia',\n        'GU': 'Guam',\n        'HI': 'Hawaii',\n        'IA': 'Iowa',\n        'ID': 'Idaho',\n        'IL': 'Illinois',\n        'IN': 'Indiana',\n        'KS': 'Kansas',\n        'KY': 'Kentucky',\n        'LA': 'Louisiana',\n        'MA': 'Massachusetts',\n        'MD': 'Maryland',\n        'ME': 'Maine',\n        'MI': 'Michigan',\n        'MN': 'Minnesota',\n        'MO': 'Missouri',\n        'MP': 'Northern Mariana Islands',\n        'MS': 'Mississippi',\n        'MT': 'Montana',\n        'NA': 'National',\n        'NC': 'North Carolina',\n        'ND': 'North Dakota',\n        'NE': 'Nebraska',\n        'NH': 'New Hampshire',\n        'NJ': 'New Jersey',\n        'NM': 'New Mexico',\n        'NV': 'Nevada',\n        'NY': 'New York',\n        'OH': 'Ohio',\n        'OK': 'Oklahoma',\n        'OR': 'Oregon',\n        'PA': 'Pennsylvania',\n        'PR': 'Puerto Rico',\n        'RI': 'Rhode Island',\n        'SC': 'South Carolina',\n        'SD': 'South Dakota',\n        'TN': 'Tennessee',\n        'TX': 'Texas',\n        'UT': 'Utah',\n        'VA': 'Virginia',\n        'VI': 'Virgin Islands',\n        'VT': 'Vermont',\n        'WA': 'Washington',\n        'WI': 'Wisconsin',\n        'WV': 'West Virginia',\n        'WY': 'Wyoming'\n}\ninverted = {state:abbrev for abbrev,state in state_map.items()}\ncombined = [all_states, all_years, all_genders]\ndf1 = pd.DataFrame(columns = ['State', 'Year', 'Gender'], data=list(itertools.product(*combined)))\n\nsg_df.drop(['Notes', 'Crude Rate','Gender Code', 'Year Code', 'State Code'], inplace = True, axis = 1)\nsga_df.drop(['Notes', 'Crude Rate', 'Ten-Year Age Groups', 'Gender Code', 'Year Code', 'State Code'],\n\tinplace = True, axis = 1)\n\nsga_df.rename(columns = {'Ten-Year Age Groups Code': 'Age Group'}, inplace = True)\nsg_df = df1.merge(sg_df, how = 'left').fillna(0)\nsg_df['State Code'] = sg_df['State'].map(inverted)\nsg_df.Year = sg_df.Year.astype(int).astype(str)\nsga_df.Year = sga_df.Year.astype(int).astype(str)\nsg_df.Population = sg_df.Population.astype(float)\nsga_df.Population = sga_df.Population.astype(float)\n\nsga_df['Rate'] = (sga_df.Deaths/sga_df.Population) * 100000\nsg_df['Rate'] = (sg_df.Deaths/sg_df.Population) * 100000\nsg_df['Missing'] = sg_df['Deaths'] == 0\nsg_df = sg_df[['State', 'State Code', 'Year', 'Gender', 'Deaths', 'Population', 'Rate', 'Missing']]\n\n\n'''Analysis by State, Year and Gender\nParams:\n        - split_gender = Splits out Male and Female plots if set to True. Aggregates otherwise\n        - title = Plot title\n        - scale_title = Scale title\n'''\nyear_list = list(sg_df['Year'].unique())\ngender_list = ['Male' , 'Female']\nsplit_gender = True\nscale_title = 'Firearm deaths per 100K'\nfor year in year_list:\n        if split_gender:\n        \tfor gender in gender_list:\n                        title = ' '.join(filter(None, [gender, 'Firearm Deaths in', year])\n                        choropleth_df = sg_df.loc[(sg_df['Year'] == year) & (sg_df['Gender'] in gender)]\n                        choropleth_helper.choropleth(choropleth_df, year, gender, metric, title, scale_title, output_path)\n        else:\n                title = ' '.join(filter(None, ['Firearm Deaths in', year])\n                choropleth_df = sg_df.loc[(sg_df['Year'] == year)]\n                choropleth_helper.choropleth(choropleth_df, year, gender_list, metric, title, scale_title, output_path)\n\n\n\n",
			"file": "analysis.py",
			"file_size": 5285,
			"file_write_time": 131544675880000000,
			"settings":
			{
				"buffer_size": 5285,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "import pandas as pd"
			}
		},
		{
			"contents": "import plotly.graph_objs as go\nfrom plotly.offline import plot, iplot\nimport os\nimport shutil\n\ndef choropleth(df, year, gender, metric_name, chart_title, bar_title, output_folder):\n\tyear = str(year)\n\tdf = df.loc[(df['Year'] == year) & (df['Gender'] in gender)]\n\n\tscl = [[0.0, 'rgb(242,240,247)'],[0.2, 'rgb(218,218,235)'],[0.4, 'rgb(188,189,220)'],\\\n\t        [0.6, 'rgb(158,154,200)'],[0.8, 'rgb(117,107,177)'],[1.0, 'rgb(84,39,143)']]\n\n\tdata = dict(type='choropleth',\n\t        locations = df['State Code'],\n\t        locationmode ='USA-states',\n\t        z = df[metric_name].astype(int),\n\t\t\tcolorscale = scl,\n\t\t\tautocolorscale = False,\n\t        colorbar = dict(title = bar_title)\n\t        )\n\n\tlayout = dict(\n\t\tgeo = dict(scope='usa', projection = dict(type = 'albers usa'),\n\t\t\t\t\tshowlakes= False),\n\t\ttitle = chart_title,\n\t         )\n\n\tchoromap = go.Figure(data=[data], layout=layout)\n\tfname = year + gender + metric_name\n\tplot(choromap, image_filename = fname, image_width = 1200, image_height = 1000)\n\t# shutil.move(download_path + fname + '.png', output_path + fname + '.png')",
			"file": "choropleth_helper.py",
			"file_size": 1077,
			"file_write_time": 131544189600000000,
			"settings":
			{
				"buffer_size": 1077,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/jason.wang/Library/Application Support/Sublime Text 3/Packages/Anaconda/Anaconda.sublime-settings",
			"settings":
			{
				"buffer_size": 21782,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 354.0,
		"last_filter": "git co",
		"selected_items":
		[
			[
				"git co",
				"Git: Commit"
			],
			[
				"git add",
				"Git: Add Current File"
			],
			[
				"git ad",
				"Git: Add Current File"
			],
			[
				"dis",
				"Anaconda: Disable linting on this file"
			],
			[
				"git change",
				"Git: Change Branch"
			],
			[
				" git co",
				"Git: Commit"
			],
			[
				"git mer",
				"Git: Merge Branch"
			],
			[
				"git ",
				"Git: Pull"
			],
			[
				"git fet",
				"Git: Fetch"
			],
			[
				"git stash",
				"Git: Stash Changes"
			],
			[
				"git bran",
				"Git: New Branch"
			],
			[
				"git del",
				"Git: Delete Branch"
			],
			[
				"git delete",
				"Git: Delete Branch"
			],
			[
				"git stas",
				"Git: Stash Apply"
			],
			[
				"diff",
				"Git: Diff All Files"
			],
			[
				"change",
				"Git: Change Branch"
			],
			[
				"git fetc",
				"Git: Fetch"
			],
			[
				"git checkout",
				"Git: Checkout Current File"
			],
			[
				"git pu",
				"Git: Pull Using Rebase"
			],
			[
				"git sta",
				"Git: Stash Apply"
			],
			[
				"co",
				"Git: Commit"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"gitgutter",
				"Preferences: GitGutter Settings"
			],
			[
				"add",
				"Git: Add..."
			],
			[
				"comm",
				"Git: Commit"
			],
			[
				"gitgu",
				"GitGutter: Support Info"
			],
			[
				"git",
				"Git: Add All"
			],
			[
				"ling",
				"Anaconda: Disable linting on this file"
			],
			[
				"lin",
				"Anaconda: Disable linting on this file"
			],
			[
				"git c",
				"Git: Commit"
			],
			[
				"git st",
				"Git: Status"
			],
			[
				"lint",
				"Anaconda: Disable linting on this file"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: List Packages"
			],
			[
				"pull",
				"Git: Pull Using Rebase"
			],
			[
				"fet",
				"Git: Fetch"
			],
			[
				"git remote",
				"Git: Track Remote Branch"
			],
			[
				"git f",
				"Git: Fetch"
			],
			[
				"remove pack",
				"Package Control: Remove Package"
			],
			[
				"install pack",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"git status",
				"Git: Status"
			],
			[
				"git commit",
				"Git: Commit"
			],
			[
				"reset",
				"Git: Reset (unstage) All"
			],
			[
				"git stage",
				"Git: Diff Staged Files"
			],
			[
				"",
				"Convert Case: Swap Case"
			],
			[
				"git bra",
				"Git: New Branch"
			],
			[
				"git sat",
				"Git: Status"
			],
			[
				"disable li",
				"Anaconda: Disable linting on this file"
			],
			[
				"git init",
				"Git: Init"
			],
			[
				"lintin",
				"Anaconda: Disable linting on this file"
			],
			[
				"disba",
				"Package Control: Disable Package"
			],
			[
				"disab",
				"Anaconda: Disable linting on this file"
			],
			[
				"disbl",
				"Anaconda: Disable linting on this file"
			],
			[
				"cus",
				"Git: Custom Command"
			],
			[
				"custom",
				"Git: Custom Command"
			],
			[
				"git custom",
				"Git: Custom Command"
			],
			[
				"com",
				"Git: Commit"
			],
			[
				"staged",
				"Git: Diff Staged Files"
			],
			[
				"git cus",
				"Git: Custom Command"
			],
			[
				"push",
				"Git: Push"
			],
			[
				"commi",
				"Git: Commit"
			],
			[
				"ad",
				"Git: Add Current File"
			],
			[
				"commit",
				"Git: Commit"
			],
			[
				"dis lint",
				"Anaconda: Disable linting on this file"
			],
			[
				"branch",
				"Git: New Branch"
			],
			[
				"git igno",
				"Git: Update Project Ignored Files"
			],
			[
				"dis lin",
				"Anaconda: Disable linting on this file"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"add all",
				"Git: Add All"
			],
			[
				"git chan",
				"Git: Change Branch"
			],
			[
				"git stat",
				"Git: Status"
			],
			[
				"git chekc",
				"Git: Checkout Current File"
			],
			[
				"git un",
				"Git: Reset (unstage) Current File"
			],
			[
				"revert",
				"File: Revert"
			],
			[
				"gs",
				"Git: Status"
			],
			[
				"change ",
				"Git: Change Branch"
			],
			[
				"add ",
				"Git: Add Current File"
			],
			[
				"git branch",
				"Git: New Branch"
			],
			[
				"instl",
				"Package Control: Install Package"
			],
			[
				"git commi",
				"Git: Commit"
			],
			[
				"git reb",
				"Git: Pull Using Rebase"
			],
			[
				"git pull",
				"Git: Pull"
			],
			[
				"cust",
				"Git: Custom Command"
			],
			[
				"cu",
				"Git: Custom Command"
			],
			[
				"c",
				"Git: Change Branch"
			],
			[
				"git cust",
				"Git: Custom Command"
			],
			[
				"delete",
				"Git: Delete Branch"
			],
			[
				"ch",
				"Git: Change Branch"
			],
			[
				"merge",
				"Git: Merge Branch"
			],
			[
				"git res",
				"Git: Reset (unstage) All"
			],
			[
				"new",
				"Git: New Branch"
			],
			[
				"mer",
				"Git: Merge Branch"
			],
			[
				"bran",
				"Git: Change Branch"
			],
			[
				"branc",
				"Git: Change Branch"
			],
			[
				"linting",
				"Anaconda: Disable linting on this file"
			],
			[
				"git brn",
				"Git: New Branch"
			],
			[
				"Snippet: ",
				"Snippet: For Loop"
			],
			[
				"gitdiff",
				"Git: Diff Current File"
			],
			[
				"git dle",
				"Git: Delete Branch"
			],
			[
				"git cha",
				"Git: Change Branch"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"git p",
				"Git: Pull Current Branch"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"anaconda",
				"Anaconda: Disable linting on this file"
			],
			[
				"prv",
				"PackageResourceViewer: Open Resource"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"install pa",
				"Package Control: Install Package"
			]
		],
		"width": 472.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/jason.wang/Documents/Analytics Projects/Gun Control",
		"/Users/jason.wang/Documents/Analytics Projects/Gun Control/files"
	],
	"file_history":
	[
		"/Users/jason.wang/Library/Application Support/Sublime Text 3/Packages/User/Anaconda.sublime-settings",
		"/Users/jason.wang/Documents/Analytics Projects/Gun Control/choropleth_helper.py",
		"/Users/jason.wang/Downloads/Untitled.py",
		"/Users/jason.wang/Documents/Analytics Projects/Gun Control/files/state_gender_age.txt",
		"/Users/jason.wang/Documents/Analytics Projects/Hurricane Harvey Tweets/Harvey_Tweets/tweet_analysis.py",
		"/Users/jason.wang/Documents/packaging_log.py",
		"/Users/jason.wang/Desktop/chipotle.tsv",
		"/Users/jason.wang/Desktop/chipotle.py",
		"/Users/jason.wang/Desktop/pandas_practice.py",
		"/Users/jason.wang/Documents/Analytics Projects/Speed Dating/EDA.py",
		"/Users/jason.wang/Desktop/test.py",
		"/Users/jason.wang/Downloads/sia-gpu-miner-v1.1.0-linux64/README.md",
		"/Users/jason.wang/Desktop/dcr.py",
		"/Volumes/Encrypted/Crypto backup/Gatehub_key.txt",
		"/Volumes/Encrypted/Crypto backup/Coinbase_secret_seed.txt",
		"/Volumes/Encrypted 2/Crypto/MyEtherWallet.txt",
		"/Volumes/Encrypted 2/Crypto/Siacoin.txt",
		"/Volumes/Encrypted/Crypto/Siacoin.txt",
		"/Volumes/Encrypted/Crypto/MyEtherWallet.txt",
		"/Users/jason.wang/Desktop/practice_problems_unit.py",
		"/Users/jason.wang/Desktop/practice_problems.py",
		"/Users/jason.wang/panda-bot/panda-bot.rb",
		"/Users/jason.wang/panda-bot/panda_review.rb",
		"/Users/jason.wang/panda-api/app/controllers/reviews_controller.rb",
		"/Users/jason.wang/panda-bot/panda_api/review_api.rb",
		"/Users/jason.wang/panda-api/app/models/review.rb",
		"/Users/jason.wang/Desktop/practice_problems.txt",
		"/Users/jason.wang/panda-bot/help/rev-help.md",
		"/Users/jason.wang/panda-bot/panda_api/developer_api.rb",
		"/Users/jason.wang/Documents/CRYPTO/NEM Private.txt",
		"/Users/jason.wang/panda-api/dev-setup/dev_zshrc.sh",
		"/Users/jason.wang/Documents/Analytics Projects/HR Satisfaction/analysis.py",
		"/Users/jason.wang/Documents/Analytics Projects/HR Satisfaction/.DS_Store",
		"/Users/jason.wang/Documents/Analytics Projects/HR Satisfaction/HR_Satisfaction.sublime-project",
		"/Users/jason.wang/Documents/Analytics Projects/SF Eviction/eviction.py",
		"/Users/jason.wang/Desktop/linkedin.py",
		"/Users/jason.wang/Desktop/monopoly.py",
		"/Users/jason.wang/Documents/Python Projects/SF Eviction/eviction.py",
		"/opt/vagrant/embedded/gems/gems/vagrant-1.8.6/contrib/st/Ruby.sublime-settings",
		"/Users/jason.wang/Documents/Python Projects/SF/eviction.py",
		"/Users/jason.wang/Documents/Python Projects/Presidential Primary Debates/debate.py",
		"/Users/jason.wang/Documents/Python Projects/SF/Eviction_Notices.csv",
		"/Users/jason.wang/Documents/Python Projects/Pokemon Go/poke.py",
		"/Users/jason.wang/Documents/Python Projects/Pokemon Go/.git/info/exclude",
		"/Users/jason.wang/Documents/Python Projects/Pokemon Go/pokemonGO.sublime-project",
		"/untitled",
		"/Users/jason.wang/Documents/Python Projects/Presidential Primary Debates/Clinton,min10,max75.png",
		"/Users/jason.wang/Documents/Python Projects/Presidential Primary Debates/Trump,min10,max75.png",
		"/Users/jason.wang/Documents/Python Projects/Presidential Primary Debates/Trump,min10,max500.png",
		"/Users/jason.wang/Documents/Python Projects/Presidential Primary Debates/Clinton,min10,max500.png",
		"/Users/jason.wang/Documents/Python Projects/Presidential Primary Debates/figure_1.png",
		"/Users/jason.wang/Documents/Python Projects/Presidential Primary Debates/tfidf_helper.py",
		"/Users/jason.wang/Documents/Python Projects/Presidential Primary Debates/positive-words.txt",
		"/Users/jason.wang/Documents/Python Projects/Presidential Primary Debates/test.txt",
		"/Users/jason.wang/Documents/Python Projects/Presidential Primary Debates/2-faced",
		"/Users/jason.wang/Documents/Python Projects/Presidential Primary Debates/negative-words.txt",
		"/Users/jason.wang/Documents/Python Projects/Presidential Primary Debates/primary_debates_cleaned.csv",
		"/Users/jason.wang/Desktop/Crime Analysis/crime.py",
		"/Users/jason.wang/Desktop/Python Practice/quandlData.py",
		"/Users/jason.wang/Desktop/Python Practice/practice.py",
		"/Users/jason.wang/Desktop/Python Practice/fifty_states.pickle",
		"/Users/jason.wang/Desktop/throwaway",
		"/Users/jason.wang/Library/Application Support/Sublime Text 3/Packages/Python/Python.sublime-build",
		"/Users/jason.wang/Library/Application Support/Sublime Text 3/Packages/User/testPython",
		"/Users/jason.wang/Desktop/quandlProject",
		"/Users/jason.wang/Library/Application Support/Sublime Text 3/Packages/Python/Python.sublime-syntax",
		"/Users/jason.wang/Downloads/medium_quality.rss"
	],
	"find":
	{
		"height": 22.0
	},
	"find_in_files":
	{
		"height": 142.0,
		"where_history":
		[
			"/Users/jason.wang/panda-bot",
			"/Users/jason.wang/panda-api",
			"/Users/jason.wang/panda-api/config/initializers",
			"panda-api"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"auto",
			"\"",
			"not appl",
			"location",
			"lat",
			"time",
			"soundb",
			"sound",
			"torpedo",
			"barrel",
			"torpe",
			"key",
			"initialize_panda_review",
			"base",
			"base_u",
			"patch",
			"name",
			"review_type",
			"update",
			"join",
			"@@name",
			"panda_review_respon",
			"completed_at",
			"parsed",
			"unassigned in the queue",
			"status",
			"|",
			"class",
			"created",
			"tdd",
			"wws",
			"grouped_by_role",
			"ladder",
			"bfs",
			"ladderClimb",
			"trump",
			"sentiment_words",
			"filter",
			"doc",
			"print",
			"open",
			"clinton_dict",
			"temp_df",
			"suffix",
			"master_df",
			"ad hoc eng"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"'",
			"sn",
			"counter"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "analysis.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5285,
						"regions":
						{
						},
						"selection":
						[
							[
								4257,
								4257
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source, text.html"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"auto_name": "import pandas as pd",
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1181.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "choropleth_helper.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1077,
						"regions":
						{
						},
						"selection":
						[
							[
								224,
								226
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/Users/jason.wang/Library/Application Support/Sublime Text 3/Packages/Anaconda/Anaconda.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21782,
						"regions":
						{
						},
						"selection":
						[
							[
								323,
								323
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": false,
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 156.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 64.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 164.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "gun_control.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"pokemonGO.sublime-project"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "panda",
		"selected_items":
		[
			[
				"panda",
				"~/panda-api/panda.sublime-workspace"
			],
			[
				"",
				"~/Documents/Analytics Projects/HR Satisfaction/HR_Satisfaction.sublime-project"
			],
			[
				"crim",
				"~/Desktop/Crime Analysis/crime_analysis.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 296.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
